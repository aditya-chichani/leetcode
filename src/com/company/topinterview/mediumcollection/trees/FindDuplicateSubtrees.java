package com.company.topinterview.mediumcollection.trees;

import com.company.thirtydaychallenge.TreeNode;

import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Set;

public class FindDuplicateSubtrees {
    public static void main(String[] args) {
        TreeNode root = TreeNode.generateTree("[55,54,56,null,55,55,57,54,56,54,56,56,58,55,55,55,55,53,53,55,55,57,57,59,59,54,56,54,null,null,null,54,54,52,54,52,54,54,56,54,56,56,56,56,58,60,60,60,60,null,53,57,57,null,null,null,53,null,55,53,53,55,53,51,53,55,53,53,53,null,57,53,55,null,57,57,55,57,57,55,55,null,59,59,59,59,61,61,61,59,59,52,52,null,58,58,58,null,54,null,null,null,54,52,54,54,56,null,null,null,52,52,52,54,54,54,54,null,null,52,54,56,58,52,54,null,null,58,null,56,58,null,56,58,58,56,56,54,56,54,54,58,60,60,60,58,60,58,60,60,62,62,null,62,60,60,60,60,null,51,53,null,53,59,59,59,59,57,57,null,null,null,53,null,null,53,53,55,53,55,57,null,null,51,53,51,53,53,null,null,null,55,55,53,null,53,51,55,55,55,57,59,57,51,53,53,53,59,59,55,57,59,59,55,57,59,59,57,59,57,55,55,55,53,55,57,55,53,53,53,55,57,59,59,null,59,59,59,61,57,59,61,61,59,59,61,59,59,59,63,61,null,null,61,61,null,null,59,null,59,null,59,null,null,null,null,54,null,52,58,60,58,null,null,58,null,58,56,58,null,56,null,54,52,null,54,null,null,null,null,null,54,null,58,56,null,52,null,54,null,null,52,null,null,null,null,null,56,56,52,null,52,null,null,52,null,56,56,56,56,null,null,56,58,60,56,56,null,52,null,null,54,52,null,52,60,60,58,60,54,56,null,null,null,58,58,null,56,56,null,null,60,58,60,60,56,56,58,58,56,null,56,56,54,54,56,54,54,52,null,null,null,null,56,54,null,null,null,null,52,52,54,null,56,56,null,60,60,58,58,60,58,58,null,null,60,null,56,56,60,null,60,null,60,60,58,60,58,60,60,60,58,60,null,58,58,60,64,62,null,null,60,60,60,60,58,60,null,null,null,null,null,null,null,53,null,null,59,59,57,59,57,59,57,59,55,57,null,57,57,null,null,null,51,null,null,55,null,null,57,null,55,null,null,null,53,null,null,53,null,null,55,57,51,53,51,null,null,null,null,57,55,57,null,null,55,57,null,57,57,null,61,null,55,57,57,null,null,null,null,null,51,null,null,null,61,null,59,null,59,null,null,61,null,null,null,57,null,null,null,57,57,null,55,57,61,59,57,57,59,61,null,null,null,null,55,55,57,59,59,null,55,null,55,null,null,57,55,53,53,55,55,57,null,null,55,null,null,null,55,null,null,null,null,null,null,53,null,null,55,null,57,null,59,61,59,61,57,57,null,null,61,61,59,59,57,57,null,null,null,57,null,null,61,61,61,null,null,59,59,61,null,59,59,61,59,null,59,59,61,61,59,59,null,null,61,61,57,57,57,59,59,null,63,65,null,63,59,null,null,null,61,61,61,null,null,null,59,61,null,52,58,60,null,null,null,null,null,60,null,58,60,58,56,56,58,60,56,54,null,58,null,null,null,null,null,null,null,56,null,56,null,56,null,null,null,null,null,null,56,null,52,null,52,52,null,null,56,56,54,null,56,58,null,54,null,null,null,null,null,null,null,null,56,56,56,null,null,58,null,null,null,null,null,null,58,60,60,null,null,null,56,58,null,null,56,54,null,58,62,62,58,60,58,58,56,58,58,58,null,null,54,null,54,56,58,58,60,58,60,60,54,null,null,null,56,56,56,54,52,54,52,52,54,56,54,null,56,56,null,54,54,54,54,54,56,null,56,null,null,null,62,null,null,null,null,null,56,58,null,null,60,null,60,60,58,60,58,60,56,56,null,null,56,56,62,62,60,null,null,null,null,60,null,60,null,60,58,null,60,60,null,62,58,60,60,60,58,60,62,null,60,62,60,null,null,null,60,60,null,62,58,58,null,null,null,null,null,null,58,null,null,null,null,66,null,null,null,null,null,null,null,null,null,null,60,null,null,null,null,null,57,null,null,61,null,null,null,null,null,null,null,null,55,null,55,57,null,59,null,null,null,null,null,null,null,null,null,55,null,null,null,57,null,null,51,null,51,null,51,53,57,null,null,null,53,55,null,null,57,57,53,null,57,57,null,null,null,null,null,59,null,null,59,null,null,null,57,null,null,null,57,null,55,null,57,null,63,63,null,63,57,57,59,61,59,57,null,57,55,null,null,57,57,59,null,null,null,null,null,55,57,57,57,59,57,59,59,null,57,null,59,61,59,null,null,null,null,57,null,null,57,55,53,55,null,null,null,55,51,53,51,null,53,null,57,57,53,55,55,null,null,null,53,null,null,null,53,55,53,null,null,null,55,55,57,null,61,null,null,null,null,57,61,61,59,61,null,59,null,null,null,null,59,57,59,59,55,55,55,null,null,null,null,57,null,63,61,63,null,null,null,null,null,null,59,61,null,null,59,59,59,59,63,null,59,null,null,61,59,61,59,61,57,59,null,null,null,null,null,59,null,63,null,null,null,null,59,61,63,63,null,null,57,57,null,59,null,null,null,null,null,56,null,62,56,54,null,null,56,58,58,null,null,null,56,null,null,null,50,null,50,52,52,54,null,null,null,null,54,null,56,null,56,58,null,null,56,null,56,58,null,null,60,null,58,56,58,null,null,null,58,58,64,64,null,null,null,64,null,null,null,null,null,58,60,62,58,58,56,null,null,null,56,null,null,null,56,null,null,null,56,56,null,56,58,null,58,null,null,null,null,null,60,60,58,null,56,null,null,null,null,null,null,null,null,null,56,58,54,56,null,null,null,null,null,null,50,null,null,54,52,50,null,null,58,null,null,58,null,54,null,null,54,56,null,null,null,52,null,null,52,null,null,null,null,54,null,58,60,60,null,null,62,60,null,null,null,null,60,62,null,60,58,60,null,null,null,60,58,null,null,56,54,null,null,null,null,null,null,null,null,null,null,null,null,null,null,62,58,null,58,58,60,60,60,60,null,null,null,null,null,null,null,60,null,60,60,60,null,60,58,56,58,58,null,null,null,null,null,60,60,60,64,64,null,62,null,null,null,null,60,null,null,null,null,63,null,57,53,55,55,57,57,57,null,59,null,null,49,51,null,null,51,53,53,51,53,null,null,null,57,null,null,57,57,null,null,null,55,null,59,null,59,59,null,null,null,null,null,null,null,59,null,null,null,63,null,null,null,65,null,null,null,null,61,63,null,59,null,57,null,null,55,57,57,null,null,55,55,null,null,null,null,null,59,59,61,null,null,null,null,59,null,null,55,null,57,59,53,55,55,null,null,49,53,null,null,53,49,51,59,null,59,57,null,null,null,null,57,57,null,null,null,null,55,null,null,null,null,null,null,null,63,null,null,null,59,null,null,null,null,null,57,57,null,null,null,59,59,59,55,null,null,55,null,null,null,null,null,59,59,null,59,null,59,null,null,null,59,null,59,61,null,null,null,null,59,61,null,null,59,57,55,null,null,57,57,57,null,61,null,61,null,null,63,63,null,null,null,null,null,59,null,null,56,null,null,54,null,null,null,null,null,null,58,null,58,56,58,58,null,null,null,null,50,null,null,null,null,null,50,null,null,null,58,null,null,58,null,null,null,56,58,null,null,null,null,60,58,60,null,null,null,null,null,null,null,null,null,null,58,null,null,null,null,null,null,null,null,null,54,null,null,null,null,null,null,null,null,null,54,null,null,null,null,null,54,null,54,54,null,56,48,null,null,52,52,54,null,null,null,null,null,60,null,null,null,58,null,56,null,null,null,null,62,null,null,null,null,58,56,56,60,null,null,60,null,null,null,null,54,56,58,null,null,null,null,null,60,58,null,null,58,58,null,null,null,null,60,60,60,58,null,58,54,54,56,58,56,58,58,58,null,62,null,60,null,null,null,null,60,null,55,55,null,null,null,null,59,null,55,null,59,59,null,null,null,null,null,51,null,null,null,null,null,null,null,null,61,null,null,null,59,null,null,59,null,null,null,null,53,null,null,null,null,null,null,55,null,null,null,null,null,51,null,null,null,null,null,null,55,null,null,null,null,59,null,57,null,57,59,null,61,null,null,null,null,57,null,null,61,null,null,null,57,null,null,null,null,null,null,null,61,61,57,59,57,null,null,null,53,55,55,57,null,57,null,null,null,null,null,57,null,59,null,null,null,59,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,52,null,null,null,null,null,null,null,52,null,null,null,null,null,56,58,null,null,null,58,null,58,null,null,62,null,58,null,null,null,56,60,62,60,62,null,null,null,null,null,null,52,52,null,null,54,56,null,null,58,null,null,null,null,null,null,null,53,null,null,null,null,null,null,59,null,null,null,null,null,null,null,null,null,null,null,59,null,null,null,null,61,61,null,null,null,null,53,55,57,57,null,null,null,null,null,null,null,null,60,60,62,60,null,null,null,54,56,56,56,58,null,null,null,null,null,null,null,61,null,null,55,57,57,57,null,55,null,null,null,null,null,56,null,58,null,58,null,null,null,null,null,null,57,null,57,null,null,58,56,null,null,null,null,57]");
        List<TreeNode> duplicateSubtrees = new FindDuplicateSubtrees().findDuplicateSubtrees(root);
        System.out.println(duplicateSubtrees);
    }

    public List<TreeNode> findDuplicateSubtrees(TreeNode root) {
        Set<String> nodeSet = new HashSet<>();
        Set<String> ansSet = new HashSet<>();
        List<TreeNode> ans = new ArrayList<>();
        postorder(root, nodeSet, ans, ansSet);
        return ans;
    }

    private String postorder(TreeNode root, Set nodeSet, List ans, Set<String> ansSet) {
        if (root == null)
            return "";
        String left = "," + postorder(root.left, nodeSet, ans, ansSet) + ",";
        String right = "," + postorder(root.right, nodeSet, ans, ansSet) + ",";
        String s = left + "," + root.val + "," + right;
        if (nodeSet.contains(s)) {
            if (!ansSet.contains(s)) {
                ansSet.add(s);
                ans.add(root);
            }
        } else {
            nodeSet.add(s);
        }
        return s;
    }
}